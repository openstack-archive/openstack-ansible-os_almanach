[tox]
minversion = 2.0
skipsdist = True
envlist = docs,linters,functional


[testenv]
usedevelop = True
install_command =
    pip install -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt} {opts} {packages}
deps =
    -r{toxinidir}/test-requirements.txt
commands =
    /usr/bin/find . -type f -name "*.pyc" -delete
passenv =
    HOME
    http_proxy
    HTTP_PROXY
    https_proxy
    HTTPS_PROXY
    no_proxy
    NO_PROXY
whitelist_externals =
    bash
    git
    rm
    wget
setenv =
    VIRTUAL_ENV={envdir}
    PYTHONUNBUFFERED=1


[testenv:docs]
commands=
    bash -c "rm -rf doc/build"
    doc8 doc
    python setup.py build_sphinx


[doc8]
extensions = .rst


# environment used by the -infra templated docs job
[testenv:venv]
commands =
    {posargs}


[testenv:pep8]
commands =
    # Run hacking/flake8 check for all python files
    bash -c "grep --recursive --binary-files=without-match \
        --files-with-match '^.!.*python$' \
        --exclude-dir .eggs \
        --exclude-dir .git \
        --exclude-dir .tox \
        --exclude-dir *.egg-info \
        --exclude-dir doc \
        {toxinidir} | xargs flake8 --verbose"


[flake8]
ignore=F403,H303


[testenv:ansible]
deps =
    {[testenv]deps}
    ansible==1.9.4
    ansible-lint>=2.7.0,<3.0.0
setenv =
    {[testenv]setenv}
    ANSIBLE_HOST_KEY_CHECKING = False
    ANSIBLE_SSH_CONTROL_PATH = /tmp/%%h-%%r
    ANSIBLE_ACTION_PLUGINS = {homedir}/.ansible/plugins/action
    ANSIBLE_CALLBACK_PLUGINS = {homedir}/.ansible/plugins/callback
    ANSIBLE_FILTER_PLUGINS = {homedir}/.ansible/plugins/filter
    ANSIBLE_LOOKUP_PLUGINS = {homedir}/.ansible/plugins/lookup
    ANSIBLE_LIBRARY = {homedir}/.ansible/plugins/library
    ANSIBLE_ROLES_PATH = {homedir}/.ansible/roles:{toxinidir}/..
commands =
    rm -rf {homedir}/.ansible/plugins
    git clone https://git.openstack.org/openstack/openstack-ansible-plugins \
              {homedir}/.ansible/plugins
    rm -rf {homedir}/.ansible/roles
    ansible-galaxy install \
                   --role-file={toxinidir}/tests/ansible-role-requirements.yml \
                   --force


[testenv:ansible-syntax]
deps =
    {[testenv:ansible]deps}
setenv =
    {[testenv:ansible]setenv}
commands =
    {[testenv:ansible]commands}
    ansible-playbook -i {toxinidir}/tests/inventory \
                     --syntax-check \
                     --list-tasks \
                     -e "rolename={toxinidir}" \
                     {toxinidir}/tests/test.yml


[testenv:ansible-lint]
deps =
    {[testenv:ansible]deps}
commands =
    {[testenv:ansible]commands}
    ansible-lint {toxinidir}


[testenv:functional]
ignore_errors = True
install_command =
    pip install -U --force-reinstall {opts} {packages}
deps =
    {[testenv:ansible]deps}
setenv =
    {[testenv:ansible]setenv}
commands =
    {[testenv:ansible]commands}
    ansible-playbook -i {toxinidir}/tests/inventory \
                     -e "rolename={toxinidir}" \
                     -e "install_test_packages=True" \
                     {toxinidir}/tests/test.yml -vvvv
    bash -c 'mkdir -p {toxinidir}/logs'
    bash -c 'rsync --archive --verbose --ignore-errors /var/log/ /openstack/log/ {toxinidir}/logs/ || true'


[testenv:linters]
deps =
    {[testenv:ansible]deps}
setenv =
    {[testenv:ansible]setenv}
commands =
    {[testenv:pep8]commands}
    {[testenv:ansible-lint]commands}
    {[testenv:ansible-syntax]commands}
    {[testenv:docs]commands}
